/* automatically generated by rust-bindgen 0.58.1 */

pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 28;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const PG_VERSION: &'static [u8; 5usize] = b"13.2\0";
pub const PG_MAJORVERSION: &'static [u8; 3usize] = b"13\0";
pub const PG_VERSION_NUM: u32 = 130002;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__fsid_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PgQueryError {
    pub message: *mut ::std::os::raw::c_char,
    pub funcname: *mut ::std::os::raw::c_char,
    pub filename: *mut ::std::os::raw::c_char,
    pub lineno: ::std::os::raw::c_int,
    pub cursorpos: ::std::os::raw::c_int,
    pub context: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_PgQueryError() {
    assert_eq!(
        ::std::mem::size_of::<PgQueryError>(),
        40usize,
        concat!("Size of: ", stringify!(PgQueryError))
    );
    assert_eq!(
        ::std::mem::align_of::<PgQueryError>(),
        8usize,
        concat!("Alignment of ", stringify!(PgQueryError))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PgQueryError>())).message as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PgQueryError),
            "::",
            stringify!(message)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PgQueryError>())).funcname as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PgQueryError),
            "::",
            stringify!(funcname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PgQueryError>())).filename as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PgQueryError),
            "::",
            stringify!(filename)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PgQueryError>())).lineno as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(PgQueryError),
            "::",
            stringify!(lineno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PgQueryError>())).cursorpos as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(PgQueryError),
            "::",
            stringify!(cursorpos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PgQueryError>())).context as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(PgQueryError),
            "::",
            stringify!(context)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PgQueryProtobuf {
    pub len: ::std::os::raw::c_uint,
    pub data: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_PgQueryProtobuf() {
    assert_eq!(
        ::std::mem::size_of::<PgQueryProtobuf>(),
        16usize,
        concat!("Size of: ", stringify!(PgQueryProtobuf))
    );
    assert_eq!(
        ::std::mem::align_of::<PgQueryProtobuf>(),
        8usize,
        concat!("Alignment of ", stringify!(PgQueryProtobuf))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PgQueryProtobuf>())).len as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PgQueryProtobuf),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PgQueryProtobuf>())).data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PgQueryProtobuf),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PgQueryScanResult {
    pub pbuf: PgQueryProtobuf,
    pub stderr_buffer: *mut ::std::os::raw::c_char,
    pub error: *mut PgQueryError,
}
#[test]
fn bindgen_test_layout_PgQueryScanResult() {
    assert_eq!(
        ::std::mem::size_of::<PgQueryScanResult>(),
        32usize,
        concat!("Size of: ", stringify!(PgQueryScanResult))
    );
    assert_eq!(
        ::std::mem::align_of::<PgQueryScanResult>(),
        8usize,
        concat!("Alignment of ", stringify!(PgQueryScanResult))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PgQueryScanResult>())).pbuf as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PgQueryScanResult),
            "::",
            stringify!(pbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PgQueryScanResult>())).stderr_buffer as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PgQueryScanResult),
            "::",
            stringify!(stderr_buffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PgQueryScanResult>())).error as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(PgQueryScanResult),
            "::",
            stringify!(error)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PgQueryParseResult {
    pub parse_tree: *mut ::std::os::raw::c_char,
    pub stderr_buffer: *mut ::std::os::raw::c_char,
    pub error: *mut PgQueryError,
}
#[test]
fn bindgen_test_layout_PgQueryParseResult() {
    assert_eq!(
        ::std::mem::size_of::<PgQueryParseResult>(),
        24usize,
        concat!("Size of: ", stringify!(PgQueryParseResult))
    );
    assert_eq!(
        ::std::mem::align_of::<PgQueryParseResult>(),
        8usize,
        concat!("Alignment of ", stringify!(PgQueryParseResult))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PgQueryParseResult>())).parse_tree as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PgQueryParseResult),
            "::",
            stringify!(parse_tree)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<PgQueryParseResult>())).stderr_buffer as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PgQueryParseResult),
            "::",
            stringify!(stderr_buffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PgQueryParseResult>())).error as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PgQueryParseResult),
            "::",
            stringify!(error)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PgQueryProtobufParseResult {
    pub parse_tree: PgQueryProtobuf,
    pub stderr_buffer: *mut ::std::os::raw::c_char,
    pub error: *mut PgQueryError,
}
#[test]
fn bindgen_test_layout_PgQueryProtobufParseResult() {
    assert_eq!(
        ::std::mem::size_of::<PgQueryProtobufParseResult>(),
        32usize,
        concat!("Size of: ", stringify!(PgQueryProtobufParseResult))
    );
    assert_eq!(
        ::std::mem::align_of::<PgQueryProtobufParseResult>(),
        8usize,
        concat!("Alignment of ", stringify!(PgQueryProtobufParseResult))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<PgQueryProtobufParseResult>())).parse_tree as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PgQueryProtobufParseResult),
            "::",
            stringify!(parse_tree)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<PgQueryProtobufParseResult>())).stderr_buffer as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PgQueryProtobufParseResult),
            "::",
            stringify!(stderr_buffer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<PgQueryProtobufParseResult>())).error as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(PgQueryProtobufParseResult),
            "::",
            stringify!(error)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PgQuerySplitStmt {
    pub stmt_location: ::std::os::raw::c_int,
    pub stmt_len: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_PgQuerySplitStmt() {
    assert_eq!(
        ::std::mem::size_of::<PgQuerySplitStmt>(),
        8usize,
        concat!("Size of: ", stringify!(PgQuerySplitStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<PgQuerySplitStmt>(),
        4usize,
        concat!("Alignment of ", stringify!(PgQuerySplitStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PgQuerySplitStmt>())).stmt_location as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PgQuerySplitStmt),
            "::",
            stringify!(stmt_location)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PgQuerySplitStmt>())).stmt_len as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(PgQuerySplitStmt),
            "::",
            stringify!(stmt_len)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PgQuerySplitResult {
    pub stmts: *mut *mut PgQuerySplitStmt,
    pub n_stmts: ::std::os::raw::c_int,
    pub stderr_buffer: *mut ::std::os::raw::c_char,
    pub error: *mut PgQueryError,
}
#[test]
fn bindgen_test_layout_PgQuerySplitResult() {
    assert_eq!(
        ::std::mem::size_of::<PgQuerySplitResult>(),
        32usize,
        concat!("Size of: ", stringify!(PgQuerySplitResult))
    );
    assert_eq!(
        ::std::mem::align_of::<PgQuerySplitResult>(),
        8usize,
        concat!("Alignment of ", stringify!(PgQuerySplitResult))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PgQuerySplitResult>())).stmts as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PgQuerySplitResult),
            "::",
            stringify!(stmts)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PgQuerySplitResult>())).n_stmts as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PgQuerySplitResult),
            "::",
            stringify!(n_stmts)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<PgQuerySplitResult>())).stderr_buffer as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PgQuerySplitResult),
            "::",
            stringify!(stderr_buffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PgQuerySplitResult>())).error as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(PgQuerySplitResult),
            "::",
            stringify!(error)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PgQueryDeparseResult {
    pub query: *mut ::std::os::raw::c_char,
    pub error: *mut PgQueryError,
}
#[test]
fn bindgen_test_layout_PgQueryDeparseResult() {
    assert_eq!(
        ::std::mem::size_of::<PgQueryDeparseResult>(),
        16usize,
        concat!("Size of: ", stringify!(PgQueryDeparseResult))
    );
    assert_eq!(
        ::std::mem::align_of::<PgQueryDeparseResult>(),
        8usize,
        concat!("Alignment of ", stringify!(PgQueryDeparseResult))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PgQueryDeparseResult>())).query as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PgQueryDeparseResult),
            "::",
            stringify!(query)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PgQueryDeparseResult>())).error as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PgQueryDeparseResult),
            "::",
            stringify!(error)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PgQueryPlpgsqlParseResult {
    pub plpgsql_funcs: *mut ::std::os::raw::c_char,
    pub error: *mut PgQueryError,
}
#[test]
fn bindgen_test_layout_PgQueryPlpgsqlParseResult() {
    assert_eq!(
        ::std::mem::size_of::<PgQueryPlpgsqlParseResult>(),
        16usize,
        concat!("Size of: ", stringify!(PgQueryPlpgsqlParseResult))
    );
    assert_eq!(
        ::std::mem::align_of::<PgQueryPlpgsqlParseResult>(),
        8usize,
        concat!("Alignment of ", stringify!(PgQueryPlpgsqlParseResult))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<PgQueryPlpgsqlParseResult>())).plpgsql_funcs as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PgQueryPlpgsqlParseResult),
            "::",
            stringify!(plpgsql_funcs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PgQueryPlpgsqlParseResult>())).error as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PgQueryPlpgsqlParseResult),
            "::",
            stringify!(error)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PgQueryFingerprintResult {
    pub fingerprint: u64,
    pub fingerprint_str: *mut ::std::os::raw::c_char,
    pub stderr_buffer: *mut ::std::os::raw::c_char,
    pub error: *mut PgQueryError,
}
#[test]
fn bindgen_test_layout_PgQueryFingerprintResult() {
    assert_eq!(
        ::std::mem::size_of::<PgQueryFingerprintResult>(),
        32usize,
        concat!("Size of: ", stringify!(PgQueryFingerprintResult))
    );
    assert_eq!(
        ::std::mem::align_of::<PgQueryFingerprintResult>(),
        8usize,
        concat!("Alignment of ", stringify!(PgQueryFingerprintResult))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<PgQueryFingerprintResult>())).fingerprint as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PgQueryFingerprintResult),
            "::",
            stringify!(fingerprint)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<PgQueryFingerprintResult>())).fingerprint_str as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PgQueryFingerprintResult),
            "::",
            stringify!(fingerprint_str)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<PgQueryFingerprintResult>())).stderr_buffer as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PgQueryFingerprintResult),
            "::",
            stringify!(stderr_buffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PgQueryFingerprintResult>())).error as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(PgQueryFingerprintResult),
            "::",
            stringify!(error)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PgQueryNormalizeResult {
    pub normalized_query: *mut ::std::os::raw::c_char,
    pub error: *mut PgQueryError,
}
#[test]
fn bindgen_test_layout_PgQueryNormalizeResult() {
    assert_eq!(
        ::std::mem::size_of::<PgQueryNormalizeResult>(),
        16usize,
        concat!("Size of: ", stringify!(PgQueryNormalizeResult))
    );
    assert_eq!(
        ::std::mem::align_of::<PgQueryNormalizeResult>(),
        8usize,
        concat!("Alignment of ", stringify!(PgQueryNormalizeResult))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<PgQueryNormalizeResult>())).normalized_query as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PgQueryNormalizeResult),
            "::",
            stringify!(normalized_query)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PgQueryNormalizeResult>())).error as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PgQueryNormalizeResult),
            "::",
            stringify!(error)
        )
    );
}
extern "C" {
    pub fn pg_query_normalize(input: *const ::std::os::raw::c_char) -> PgQueryNormalizeResult;
}
extern "C" {
    pub fn pg_query_scan(input: *const ::std::os::raw::c_char) -> PgQueryScanResult;
}
extern "C" {
    pub fn pg_query_parse(input: *const ::std::os::raw::c_char) -> PgQueryParseResult;
}
extern "C" {
    pub fn pg_query_parse_protobuf(
        input: *const ::std::os::raw::c_char,
    ) -> PgQueryProtobufParseResult;
}
extern "C" {
    pub fn pg_query_parse_plpgsql(
        input: *const ::std::os::raw::c_char,
    ) -> PgQueryPlpgsqlParseResult;
}
extern "C" {
    pub fn pg_query_fingerprint(input: *const ::std::os::raw::c_char) -> PgQueryFingerprintResult;
}
extern "C" {
    pub fn pg_query_split_with_scanner(input: *const ::std::os::raw::c_char) -> PgQuerySplitResult;
}
extern "C" {
    pub fn pg_query_split_with_parser(input: *const ::std::os::raw::c_char) -> PgQuerySplitResult;
}
extern "C" {
    pub fn pg_query_deparse_protobuf(parse_tree: PgQueryProtobuf) -> PgQueryDeparseResult;
}
extern "C" {
    pub fn pg_query_free_normalize_result(result: PgQueryNormalizeResult);
}
extern "C" {
    pub fn pg_query_free_scan_result(result: PgQueryScanResult);
}
extern "C" {
    pub fn pg_query_free_parse_result(result: PgQueryParseResult);
}
extern "C" {
    pub fn pg_query_free_split_result(result: PgQuerySplitResult);
}
extern "C" {
    pub fn pg_query_free_deparse_result(result: PgQueryDeparseResult);
}
extern "C" {
    pub fn pg_query_free_protobuf_parse_result(result: PgQueryProtobufParseResult);
}
extern "C" {
    pub fn pg_query_free_plpgsql_parse_result(result: PgQueryPlpgsqlParseResult);
}
extern "C" {
    pub fn pg_query_free_fingerprint_result(result: PgQueryFingerprintResult);
}
extern "C" {
    pub fn pg_query_exit();
}
extern "C" {
    pub fn pg_query_init();
}
