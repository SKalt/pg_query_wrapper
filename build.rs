use std::path::Path;
extern crate cc;

fn main() -> std::io::Result<()> {
    let parser_dir = Path::new("parser");
    // let include = &parser_dir
    println!("cargo:rerun-if-changed=parser");
    let mut cfg = cc::Build::new();
    cfg.include("parser").include("parser/include");
    // TODO: use glob
    cfg.file("./parser/guc-file.c")
        .file("parser/pg_query.c")
        .file("parser/pg_query_deparse.c")
        .file("parser/pg_query_fingerprint.c")
        .file("parser/pg_query_json_plpgsql.c")
        .file("parser/pg_query_normalize.c")
        .file("parser/pg_query_outfuncs_json.c")
        .file("parser/pg_query_outfuncs_protobuf.c")
        .file("parser/pg_query_parse.c")
        .file("parser/pg_query_parse_plpgsql.c")
        .file("parser/pg_query.pb-c.c")
        .file("parser/pg_query_readfuncs_protobuf.c")
        .file("parser/pg_query_scan.c")
        .file("parser/pg_query_split.c")
        .file("parser/protobuf-c.c")
        .file("parser/src_backend_catalog_namespace.c")
        .file("parser/src_backend_catalog_pg_proc.c")
        .file("parser/src_backend_commands_define.c")
        .file("parser/src_backend_libpq_pqcomm.c")
        .file("parser/src_backend_nodes_bitmapset.c")
        .file("parser/src_backend_nodes_copyfuncs.c")
        .file("parser/src_backend_nodes_equalfuncs.c")
        .file("parser/src_backend_nodes_extensible.c")
        .file("parser/src_backend_nodes_list.c")
        .file("parser/src_backend_nodes_makefuncs.c")
        .file("parser/src_backend_nodes_nodeFuncs.c")
        .file("parser/src_backend_nodes_value.c")
        .file("parser/src_backend_parser_gram.c")
        .file("parser/src_backend_parser_parse_expr.c")
        .file("parser/src_backend_parser_parser.c")
        .file("parser/src_backend_parser_scan.c")
        .file("parser/src_backend_parser_scansup.c")
        .file("parser/src_backend_postmaster_postmaster.c")
        .file("parser/src_backend_storage_ipc_ipc.c")
        .file("parser/src_backend_storage_lmgr_s_lock.c")
        .file("parser/src_backend_tcop_postgres.c")
        .file("parser/src_backend_utils_adt_datum.c")
        .file("parser/src_backend_utils_adt_expandeddatum.c")
        .file("parser/src_backend_utils_adt_format_type.c")
        .file("parser/src_backend_utils_adt_ruleutils.c")
        .file("parser/src_backend_utils_error_assert.c")
        .file("parser/src_backend_utils_error_elog.c")
        .file("parser/src_backend_utils_fmgr_fmgr.c")
        .file("parser/src_backend_utils_hash_dynahash.c")
        .file("parser/src_backend_utils_init_globals.c")
        .file("parser/src_backend_utils_mb_mbutils.c")
        .file("parser/src_backend_utils_misc_guc.c")
        .file("parser/src_backend_utils_mmgr_aset.c")
        .file("parser/src_backend_utils_mmgr_mcxt.c")
        .file("parser/src_common_encnames.c")
        .file("parser/src_common_keywords.c")
        .file("parser/src_common_kwlookup.c")
        .file("parser/src_common_psprintf.c")
        .file("parser/src_common_string.c")
        .file("parser/src_common_stringinfo.c")
        .file("parser/src_common_wchar.c")
        .file("parser/src_pl_plpgsql_src_pl_comp.c")
        .file("parser/src_pl_plpgsql_src_pl_funcs.c")
        .file("parser/src_pl_plpgsql_src_pl_gram.c")
        .file("parser/src_pl_plpgsql_src_pl_handler.c")
        .file("parser/src_pl_plpgsql_src_pl_scanner.c")
        .file("parser/src_port_erand48.c")
        .file("parser/src_port_pg_bitutils.c")
        .file("parser/src_port_pgsleep.c")
        .file("parser/src_port_pgstrcasecmp.c")
        .file("parser/src_port_qsort.c")
        .file("parser/src_port_random.c")
        .file("parser/src_port_snprintf.c")
        .file("parser/src_port_strerror.c")
        .file("parser/src_port_strnlen.c")
        .file("parser/xxhash.c");
    // .file("parser/pg_query.c")
    // .file("parser/pg_query_split.c")
    cfg.compile("libpg_query");
    Ok(())
}
